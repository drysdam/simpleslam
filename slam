#!/usr/bin/env python3

import skgeom as sg
import skgeom.draw as sgdraw
import numpy as np
import matplotlib.pyplot as plt
import sys

def deg2dir(ang):
    # 0 is up, 90 to the right
    rad = np.deg2rad(ang)
    s = np.sin(rad)
    c = np.cos(rad)
    dir2 = sg.Direction2(100*s, 100*c)
    # print(ang, rad, s, c, dir2)
    return dir2
    
class World():
    def __init__(self, polygonmap):
        # these should probably be properties of the Robot
        self.angerrmax = .1
        self.poserrmax = .01
        self.lidardisterr = .01
        self.lidardropoutfrac = .1
        
        self.pgonmap = polygonmap
        self.robotpos = [0, 0]
        self.robotang = 0

        self.totalangerr = 0
        
    def graph(self):
        figw = plt.figure(figsize=(8,4))
        ax = figw.add_subplot(111)
        ax.set_aspect('equal')
        sgdraw.draw(self.pgonmap)

    def robot_rotate(self, ang):
        angerr = 2*self.angerrmax*(np.random.random() - .5)
        self.totalangerr += angerr
        self.robotang = np.fmod(self.robotang + ang + angerr, 360)

    def robot_translate(self, dx, dy):
        poserrx = 2*self.poserrmax*(np.random.random() - .5)
        poserry = 2*self.poserrmax*(np.random.random() - .5)
        self.robotpos[0] = self.robotpos[0] + dx + poserrx
        self.robotpos[1] = self.robotpos[1] + dy + poserry
        
    def probe(self, scanangle):
        # ray = sg.Ray2(sg.Point2(0, 0),
        #               sg.Point2(10, 0))
        origin = sg.Point2(self.robotpos[0], self.robotpos[1])
        ray = sg.Ray2(origin,
                      deg2dir(np.fmod(self.robotang + scanangle, 360)))
        #sgdraw.draw(ray, display_range=100)
        mind = 1e10
        for edge in self.pgonmap.edges:
            isct = sg.intersection(ray, edge)
            if isct == None:
                continue
            d = np.sqrt(float((isct - origin).squared_length()))
            mind = min(mind, d)

        if np.random.random() < self.lidardropoutfrac:
            return None
        return mind+self.lidardisterr*(np.random.random() - .5)

    
class Robot():
    def __init__(self, world):
        self.W = world
        self.robotpos = [0, 0]
        self.robotang = 0
        
    def rotate(self, ang):
        self.robotang = np.fmod(self.robotang + ang, 360)
        self.W.robot_rotate(ang)

    def translate(self, dx, dy):
        self.robotpos[0] += dx
        self.robotpos[1] += dy
        self.W.robot_translate(dx, dy)

    def lidarsweep(self):
        angs = range(0, 360, 1)
        angs2 = []
        rngs = []
        xs = []
        ys = []
        for ang in angs:
            rng = W.probe(ang)
            if rng == None:
                continue
            angs2.append(ang)
            rngs.append(rng)
            xs.append(rng*np.cos(np.deg2rad(ang)))
            ys.append(rng*np.sin(np.deg2rad(ang)))

        return ([np.array(angs2), np.array(rngs)],
                [np.array(xs), np.array(ys)])
                
class SLAMMap():
    def __init(self):
        pass

    def extract_features(self, polarpts, cartpts):
        angs, rngs = polarpts
        xs, ys = cartpts

        # RANSAC (features are lines)
        # while (still have unextracted points
        #        and number of points remaining is at least C
        #        and have done no more than N iterations)
        #   choose a random point not in an extract feature
        #   choose S other points no more than D degrees away
        #   fit line to S+1 points
        #   if at least C points are within X meters
        #     find all points with X meters and make new line fit
        #     add line to feature list
        #     remove points from consideration
        S = 10
        D = 10
        C = 5
        X = .02
        N = 10
        
        features = []

        usedidxs = []
        iters = 0
        done = False
        while not done:
            idx = np.random.randint(0, len(angs))
            while idx in usedidxs:
                idx = np.random.randint(0, len(angs))
                
            idxs = np.where(abs((angs[idx] - angs + 180) % 360 - 180) < D)[0]
            idxs = list(set(idxs) - set(usedidxs))
            idxs = idxs[0:S]

            p = np.polyfit(xs[idxs], ys[idxs], deg=1)
            diffs0 = np.abs(np.polyval(p, xs[idxs]) - ys[idxs])
            idxs = np.where(diffs0 < X)[0]
            
            if len(idxs) > C:
                diffs = np.abs(np.polyval(p, xs) - ys)
                idxs = np.where(diffs < X)[0]
                idxs = list(set(idxs) - set(usedidxs))
                p = np.polyfit(xs[idxs], ys[idxs], deg=1)
                features.append([p, idxs])
                usedidxs += idxs
            iters += 1

            if iters > N:
                done = True
            if len(angs) - len(usedidxs) < C:
                done = True
            
        return features
        
if __name__ == '__main__':    
    figr = plt.figure(figsize=(8,4))
    axr = figr.add_subplot(111)
    axr.set_aspect('equal')
    
    pgon = sg.Polygon([sg.Point2(-50, 50),
                       sg.Point2(50, 50),
                       sg.Point2(50, -50),
                       sg.Point2(-50, -50)])
    W = World(pgon)
    R = Robot(W)
    M = SLAMMap()

    R.rotate(12.2)
    
    polarpts, cartpts = R.lidarsweep()
    axr.plot(cartpts[0], cartpts[1], '.', markersize=3)
    features = M.extract_features(polarpts, cartpts)
    for p, idxs in features:
        axr.plot(cartpts[0][idxs],
                 np.polyval(p, cartpts[0][idxs]),
                 color=(.1,.1,.1,.6))
    
    # for i in range(360):
    #     R.rotate(1)
    # [angs, rngs], [xs, ys] = R.lidarsweep()
    # axr.plot(xs, ys, '.', markersize=3)

    plt.show()
